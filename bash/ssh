#----------------------------------------------------------
# Classic connection (opened each time)
$ for i in $(seq 1 3); do time ssh <user>@<host> ' ls ' 2>&1 >/dev/null ; done

real	0m0,587s
user	0m0,040s
sys	0m0,004s

real	0m0,570s
user	0m0,044s
sys	0m0,000s

real	0m0,557s
user	0m0,024s
sys	0m0,004s

#----------------------------------------------------------
# Create a persistant connection
$ for i in $(seq 1 3); do time ssh  -o ControlMaster=auto -o ControlPersist=yes -o ControlPath=/tmp/ssh-%r@%h:%p <user>@<host> ' ls ' 2>&1 >/dev/null ; done

real	0m0,566s
user	0m0,036s
sys	0m0,004s

real	0m0,059s
user	0m0,000s
sys	0m0,004s

real	0m0,061s
user	0m0,004s
sys	0m0,008s

#----------------------------------------------------------
# Check persistant connection
$ ls -lah /tmp/ssh-*@*
srw------- 1 user user 0 juil. 27 09:56 /tmp/ssh-<user>@<host>:<port>

#----------------------------------------------------------
# Automatic with ssh config (not tried)
$ head ~/.ssh/config
USER=<user>

Host *
    ControlMaster auto
    ControlPersist yes
    ControlPath /tmp/ssh-%h-%p-%r

#----------------------------------------------------------

$ ssh user@server "$( cat << 'EOT'
> echo "Variables like '${HOSTNAME}' and commands like $( uname -a )"
> echo "will be interpolated on the server, thanks to the single quotes"
> echo "around 'EOT' above."
> pwd
> cd /tmp
> pwd
> EOT
> )"
Variables like 'server' and commands like Linux server 3.2.0-4-amd64 #1 SMP Debian 3.2.93-1 x86_64 GNU/Linux
will be interpolated on the server, thanks to the single quotes
around 'EOT' above.
/home/user
/tmp

$ ssh user@server "$( cat << EOT
> echo "If you want '${HOSTNAME}' and $( uname -a ) to be interpolated"
> echo "on the client instead, omit the the single quotes around EOT."
> pwd
> cd /tmp
> pwd
> EOT
> )"
If you want 'my-linux' and Linux my-linux 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2+deb8u5 (2017-09-19) x86_64 GNU/Linux to be interpolated
on the client instead, omit the the single quotes around EOT.
/home/user
/tmp

#----------------------------------------------------------
# Example with loop, remove some files on remote slaves

for PORT in 1201 1203 1204 1205 1206 1208
do
    for REMOTE_DIR in dir1 dir2
    do
        echo "${PORT} -> Clean ${REMOTE_DIR}"
        ssh root@localhost -i .ssh/id_rsa_slaves -p ${PORT} "$( cat << EOT
        cd /home/user/${REMOTE_DIR}
        pwd
        find . -name '*.so' | xargs rm -fr
EOT
)"
    done
done

#----------------------------------------------------------
# Get some remote informations

for server in server1 server2
do
    ssh user@$server "$( cat << 'EOT'
    for profile in $(ls -d some_dirs_*)
    do
        result=$(grep SOMETHING $profile/file.conf)
        echo "$(hostname), $profile, $result"
    done
EOT
    )"
done

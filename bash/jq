#------------------------------------------------------------------------------
# Documentation
https://stedolan.github.io/jq/
https://stedolan.github.io/jq/manual/
https://stedolan.github.io/jq/manual/v1.4/
https://jqplay.org/


#------------------------------------------------------------------------------
# Show (v1.5)

$ echo '{"token":"eea2d65d-0c25-4600-ba64-db913f7ac6df","access":"read write","expires_in":3599}' | jq
{
  "token": "eea2d65d-0c25-4600-ba64-db913f7ac6df",
  "access": "read write",
  "expires_in": 3599
}

# Show (v1.4)
$ echo '{"token":"eea2d65d-0c25-4600-ba64-db913f7ac6df","access":"read write","expires_in":3599}' | jq '.'
{
  "token": "eea2d65d-0c25-4600-ba64-db913f7ac6df",
  "access": "read write",
  "expires_in": 3599
}


#------------------------------------------------------------------------------
# Get a parameter with quotes (v1.4 / v1.5)

$ echo '{"token":"eea2d65d-0c25-4600-ba64-db913f7ac6df","access":"read write","expires_in":3599}' | jq ".token"
"eea2d65d-0c25-4600-ba64-db913f7ac6df"


#------------------------------------------------------------------------------
# Get a parameter without quotes (v1.4 / v1.5)

$ echo '{"token":"eea2d65d-0c25-4600-ba64-db913f7ac6df","access":"read write","expires_in":3599}' | jq -r ".token" > /tmp/output

$ cat -e /tmp/output 
eea2d65d-0c25-4600-ba64-db913f7ac6df$


#------------------------------------------------------------------------------
# Get a parameter without quotes and without newline (v1.5)

$ echo '{"token":"eea2d65d-0c25-4600-ba64-db913f7ac6df","access":"read write","expires_in":3599}' | jq -jr ".token" > /tmp/output
$ cat -e /tmp/output 
eea2d65d-0c25-4600-ba64-db913f7ac6df

# Get a parameter without quotes and without newline (v1.4)
$ echo '{"token":"eea2d65d-0c25-4600-ba64-db913f7ac6df","access":"read write","expires_in":3599}' | jq -r ".token" | perl -pe 's/\n//g' > /tmp/output
$ cat -e /tmp/output 
eea2d65d-0c25-4600-ba64-db913f7ac6df


#------------------------------------------------------------------------------
# Reduce arrays

$ echo '[[{"key": "value"},{"key": "value2"}]]' | jq '.'
[
  [
    {
      "key": "value"
    },
    {
      "key": "value2"
    }
  ]
]

$ echo '[[{"key": "value"},{"key": "value2"}]]' | jq '.[][]'
{
  "key": "value"
}
{
  "key": "value2"
}


#------------------------------------------------------------------------------
# List keys

$ echo '{ "hello": {"abc": 1, "abcd": 2, "Foo": 3}, "world": {"def": 1, "defg": 2, "Bar": 3} }' | jq 'keys'
[
  "hello",
  "world"
]
$ echo '{ "hello": {"abc": 1, "abcd": 2, "Foo": 3}, "world": {"def": 1, "defg": 2, "Bar": 3} }' | jq '.hello | keys'
[
  "Foo",
  "abc",
  "abcd"
]

# -r remove double quotes
# to_entries[] | .key allow to get all keys
$ cat file.json | jq -r '.components.schemas | to_entries[] | .key'
AccountBenchmarkInstrument
AccountExposure
AccountExposureRequest
AccountExposureResponse
AccountGroupResponse

# print sub elements
$ cat file.json | jq -r '.definitions.MyObject.properties | to_entries[] | "\(.key)|\(.value.type)|\(.value.items)|\(.value.enum)"'
accountCurrency|string|null|null
number|integer|null|null
transactionDate|string|null|null


#------------------------------------------------------------------------------
# Conditions

 $ echo '2' | jq 'if . == 0 then "zero" elif . == 1 then "one" else "many" end'
"many"

$ echo '[[{"key": "value"},{"key": "value2"}]]' | jq '.[][]' | jq 'if .key == "value2" then . else empty end'
{
  "key": "value2"
}


#------------------------------------------------------------------------------
# Convert lines to JSON list

$ cat list.txt
Abc
Def
Ghijk

$ jq -Rn '[inputs | match("(.*)") | .captures | (.[0].string)] ' list.txt
[
  "Abc",
  "Def",
  "Ghijk"
]

$ jq -Rn '[inputs | .] ' list.txt
[
  "Abc",
  "Def",
  "Ghijk"
]


#------------------------------------------------------------------------------
# Addition

$ echo '{"a": 10, "b": 20}' | jq '.a + .b'
30


#------------------------------------------------------------------------------
# Functions : Map / Add

$ echo '[5, 10, 15]' | jq -c 'map(. + 2)'
[7,12,17]

$ echo '["5", "10", "15"]' | jq -c 'map(. + "2")'
["52","102","152"]

$ echo '[5, 10, 15]' | jq -c 'add'
30

$ echo '["5", "10", "15"]' | jq -c 'add'
"51015"


# Install :
# ln -s ~/Github/scripts/bash/bash_aliases ~/.bash_aliases

#=============================================================================#
# OVERRIDE VARIABLES                                                          #
#=============================================================================#

export PATH=$PATH:~/.local/bin

# Search a valid directory
shopt -s cdspell

# Check there are no running jobs before exit
shopt -s checkjobs

# Save multi-line commands as one command
shopt -s cmdhist
 
# avoid execution of copy-paste blocks of code
# only from bash 4.4
bind "set enable-bracketed-paste on"
 
# by default, readline will autocomplete with the first choice
# show-all-if-ambiguous will not autocomplete, just show a list of possibilities
# show-all-if-unmodified permits to autocomplete common parts, and show a list of possiblities
bind "set show-all-if-unmodified on"
 
# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
bind "set skip-completed-text on"

# ignore case with completion, once you taste it, you can't go without it
bind "set completion-ignore-case on"
 
# Treat hyphens and underscores as equivalent for completion
bind "set completion-map-case on"
 
# add a character after the file name in completion list (like ls -F)
bind "set visible-stats on"

# Line Histo Session
export HISTSIZE=15000

# Line Histo Full
export HISTFILESIZE=200000

# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
export HISTTIMEFORMAT='%F %T '

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

#=============================================================================#
# FUNCTIONS                                                                   #
#=============================================================================#

function rmdep  { find . -name "*.dep" -exec grep -q $@ \{} \; -print -delete; }

json () { echo "$*" | perl -p -e "s/\n//g" | python3 -mjson.tool; }
json_sq () { echo "$*" | perl -p -e "s/\n//g" | sed s/\'/\"/g | python3 -mjson.tool; }
xml  () { echo "$*" | perl -p -e "s/\n//g" | xmlstarlet fo -s 4; }
xml_root  () { echo "<xml_root>$*</xml_root>" | perl -p -e "s/\n//g" | xmlstarlet fo -s 4; }
echo_clean() { echo "$*" | perl -p -e "s/\s*\n/\n/g"; }
cat_clean () { cat "$*" | perl -p -e "s/\s*\n/\n/g"; }
function cl { cd $* && ls -l; }

function demon() { ( eval "$@" & ) }
export -f demon

findbin () { find . -type f -executable -name "*$**"; }

#colored man
#man() {
#    env LESS_TERMCAP_mb=$'\E[01;31m' \
#    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
#    LESS_TERMCAP_me=$'\E[0m' \
#    LESS_TERMCAP_se=$'\E[0m' \
#    LESS_TERMCAP_so=$'\E[38;5;246m' \
#    LESS_TERMCAP_ue=$'\E[0m' \
#    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
#    man "$@"
#}

#=============================================================================#
# ALIAS                                                                       #
#=============================================================================#

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# LS
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# SSH
alias d='ssh -l dba'
alias ww='ssh -l www'
alias r='ssh -l root'

# Avoid making mistakes
alias rm='rm -i'
#alias cp='cp -i'
alias mv='mv -i'

alias please='sudo $(history -p \!\!)'

#=============================================================================#
# COMMANDS                                                                    #
#=============================================================================#

if [ $(ssh-add -l | grep -c "$HOME/.ssh") -eq 0 ]
then
    ssh-add
fi

# autocomplete ssh commands
complete -W "$(echo `cat ~/.bash_history | egrep '^ssh ' | sort | uniq | sed 's/^ssh //'`;)" ssh


#=============================================================================#
# LIST CRON                                                                   #
#=============================================================================#


# https://stackoverflow.com/questions/134906/how-do-i-list-all-cron-jobs-for-all-users

# Given a stream of crontab lines, exclude non-cron job lines, replace
# whitespace characters with a single space, and remove any spaces from the
# beginning of each line.
function _list_cron__clean_lines() {
    while read line ; do
        echo "${line}" |
            egrep --invert-match '^($|\s*#|\s*[[:alnum:]_]+=)' |
            sed --regexp-extended "s/\s+/ /g" |
            sed --regexp-extended "s/^ //"
    done;
}

# Given a stream of cleaned crontab lines, echo any that don't include the
# run-parts command, and for those that do, show each job file in the run-parts
# directory as if it were scheduled explicitly.
function _list_cron__lookup_run_parts() {
    while read line ; do
        match=$(echo "${line}" | egrep -o 'run-parts (-{1,2}\S+ )*\S+')

        if [[ -z "${match}" ]] ; then
            echo "${line}"
        else
            cron_fields=$(echo "${line}" | cut -f1-6 -d' ')
            cron_job_dir=$(echo  "${match}" | awk '{print $NF}')

            if [[ -d "${cron_job_dir}" ]] ; then
                for cron_job_file in "${cron_job_dir}"/* ; do  # */ <not a comment>
                    [[ -f "${cron_job_file}" ]] && echo "${cron_fields} ${cron_job_file}"
                done
            fi
        fi
    done;
}

function list_cron() {
    # System-wide crontab file and cron job directory. Change these for your system.
    CRONTAB='/etc/crontab'
    CRONDIR='/etc/cron.d'
    
    # Single tab character. Annoyingly necessary.
    tab=$(echo -en "\t")
    
    # Temporary file for crontab lines.
    temp=$(tempfile)
    
    # Add all of the jobs from the system-wide crontab file.
    cat "${CRONTAB}" | _list_cron__clean_lines | _list_cron__lookup_run_parts > ${temp}
    
    # Add all of the jobs from the system-wide cron directory.
    cat "${CRONDIR}"/* | _list_cron__clean_lines >> ${temp}  # */ <not a comment>
    
    # Add each user's crontab (if it exists). Insert the user's name between the
    # five time fields and the command.
    while read user ; do
        crontab -l -u "${user}" 2>/dev/null |
            _list_cron__clean_lines |
            sed --regexp-extended "s/^((\S+ +){5})(.+)$/\1${user} \3/" >> ${temp}
    done < <(cut --fields=1 --delimiter=: /etc/passwd)
    
    # Output the collected crontab lines. Replace the single spaces between the
    # fields with tab characters, sort the lines by hour and minute, insert the
    # header line, and format the results as a table.
    cat ${temp} |
        sed --regexp-extended "s/^(\S+) +(\S+) +(\S+) +(\S+) +(\S+) +(\S+) +(.*)$/\1\t\2\t\3\t\4\t\5\t\6\t\7/" |
        sort --numeric-sort --field-separator="${tab}" --key=2 |
        sed "1i\mi\th\td\tm\tw\tuser\tcommand" |
        column -s"${tab}" -t
    
    rm --force ${temp}
}


#=============================================================================#
# GIT                                                                         #
#=============================================================================#

# https://github.com/magicmonty/bash-git-prompt
GIT_PROMPT_ONLY_IN_REPO=1
GIT_PROMPT_SHOW_UPSTREAM=0
source ~/.bash-git-prompt/gitprompt.sh

# ssh-add for eclipse
export GIT_SSH=/usr/bin/ssh


#=============================================================================#
# CUSTOM AND NON-COMMITED THINGS                                              #
#=============================================================================#

if [ -f ~/.bash_aliases_custom ]; then
    . ~/.bash_aliases_custom
fi

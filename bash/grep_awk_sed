#------------------------------------------------------------------------------
# https://github.com/ggreer/the_silver_searcher
# Improve grep -> package silversearcher-ag

ag pattern

#------------------------------------------------------------------------------
# Add a new empty line between each line
$ echo -ne "1\n2\n3\n" | sed 's/$/\n/g'
1

2

3


#------------------------------------------------------------------------------
# Aggregate lines
$ echo -ne "1\n2\n3\n" | perl -00pe 's/\n/ /g'
1 2 3 
$ echo -ne "1\n2\n3\n" | awk '{ SEP=""; for (i = 1; i <= NF; i++) { printf SEP $i; SEP=" " } }' RS='\0' FS="\n"
1 2 3 

#------------------------------------------------------------------------------
# SED : handle single and double quotes
$ echo "single'quote" | sed 's/'"'"'/"/g'
single"quote
$ echo "single'quote" | sed "s/'/\"/g"
single"quote
$ echo 'double"quote' | sed "s/\"/'/g"
double'quote
$ echo 'double"quote' | sed 's/"/'"'"'/g'
double'quote

#------------------------------------------------------------------------------
# AWK : remove column 2 and 4 for each lines
echo -ne "A, B, C, D, E; 1, 2, 3, 4, 5; a, b, c, d, e;" | awk '{
for (i = 1; i <= NF; i++)
{
    if ( i == 2 || i == 4 )
        continue;
    
    printf $i;
    if ( i < NF )
        printf FS;
    else
        printf RS;
}
}' RS=';' FS=","
A, C, E; 1, 3, 5; a, c, e;

#------------------------------------------------------------------------------
# AWK : transform column 4 to a fixed value
echo -ne "A, B, C, D, E; 1, 2, 3, 4, 5; a, b, c, d, e;" | awk '{
for (i = 1; i <= NF; i++)
{
    if ( i == 4 )  
        printf("%s", " FOUR"); 
    else
        printf("%s", $i);
    if ( i < NF )
        printf FS;
    else
        printf RS;
}
}' RS=';' FS=","
A, B, C, FOUR, E; 1, 2, 3, FOUR, 5; a, b, c, FOUR, e;

echo -ne "A, B, C, D, E; 1, 2, 3, 4, 5; a, b, c, d, e;" | awk '{$4="FOUR";print}' RS=';' FS=", " OFS=", " ORS=";"
A, B, C, FOUR, E; 1, 2, 3, FOUR, 5; a, b, c, FOUR, e;

echo -ne "A, B, C, D, E; 1, 2, 3, 4, 5; a, b, c, d, e;" | awk -F ", " -v OFS=", " '{$4="FOUR";print}' RS=';' ORS=";"
A, B, C, FOUR, E; 1, 2, 3, FOUR, 5; a, b, c, FOUR, e;

#------------------------------------------------------------------------------
# Transform lines to list
echo -ne "AAA\nBBB\nCCC\n" | perl -00pe "s|^|<START>|sg" | perl -00pe "s|\n$|<END>|sg" | perl -pe "s/\n/<DELIM>/g"
<START>AAA<DELIM>BBB<DELIM>CCC<END>

# Transform to SQL list without quotes
echo -ne "1\n2\n3\n" | perl -00pe "s|^|(|sg" | perl -00pe "s|\n$|)|sg" | perl -pe "s/\n/,/g"
(1,2,3)

# Transform to SQL list with quotes
echo -ne "A\nB\nC\n" | perl -00pe "s|^|('|sg" | perl -00pe "s|\n$|')|sg" | perl -pe "s/\n/','/g"
echo -ne "A\nB\nC\n" | sed "s/^/'/; s/$/'/" | paste -sd, | sed "s/^/(/; s/$/)/"
('A','B','C')

# Transform to GREP list
echo -ne "A\nB\nC\n" | perl -00pe 's|^|"|sg' | perl -00pe 's|\n$|"|sg' | perl -pe "s/\n/\\\|/g"
"A\|B\|C"

# Transform to single-quoted list
echo -ne "A\nB\nC\n" | perl -00pe "s|^|'|sg" | perl -00pe "s|\n$|'|sg" | perl -pe "s/\n/\|/g"
'A|B|C'

# Transform to spaced list
echo -ne "A\nB\nC\n" | tr '\n' ' '
A B C 


#------------------------------------------------------------------------------
# Load files matching "AAA" without matching "BBB"
$ kate -n $(find . -name "*.ext" | xargs grep -L "BBB" | xargs grep -l "AAA")
$ kate -n $(find . -name "*.ext" | xargs grep -l "AAA" | xargs grep -L "BBB")


#------------------------------------------------------------------------------
# Grep with partial binary file
# https://stackoverflow.com/questions/9988379/how-to-grep-a-text-file-which-contains-some-binary-data
$ grep -e '<pattern>' file.log
Fichier binaire file.log correspondant
$ cat -v file.log | grep -e "<pattern>"
$ bunzip2 -c file.log.bz2 | cat -v | grep -e "<pattern>"

#------------------------------------------------------------------------------
# Grep datetime and extract some lines (with id)
# Re-Grep only these lines
$ egrep "^08:00:0" log | grep "Notification" > output
$ cat output | sed "s/.*'\(.*\)'/\1/g" | sort | uniq -c | egrep "\s*1 " | sed 's/.* \([^ ]*\)/\1/g' | head
id1
id2
id3
$ cat output | sed "s/.*'\(.*\)'/\1/g" | sort | uniq -c | egrep "\s*1 " | sed 's/.* \([^ ]*\)/\1/g' | perl -00pe 's|^|"|sg' | perl -00pe 's|\n$|"|sg' | perl -pe "s/\n/\\\|/g" > mygrep
$ grep -f "mygrep" output | less


#------------------------------------------------------------------------------
# Sed Replace only matched lines
sed -i '/pattern/s/string_scr/string_dest/g' file


#------------------------------------------------------------------------------
# Remplace un retour à la ligne par les caractères '\n'
$ echo -e 'a\nbaaa\nhello\nworld' | sed ':a;N;$!ba;s|\n|\\n|g'
-> `:a` : étiquette
-> `N` : ajoute la ligne suivante au texte (donc je suppose que ca concatène toutes les lignes)
-> `$!ba` : si ce n'est pas la dernière ligne, saute vers `a`
a\nbaaa\nhello\nworld


#------------------------------------------------------------------------------
# Time elapsed in milliseconds between two lines (format %H:%M:%S.xxx) (diff) (v1)

echo "06:51:03.124 INFO   SUBSCRIBE on account [TOTO1]
06:51:08.547 INFO   SUBSCRIBE on account [TOTO2]
06:51:09.117 INFO   SUBSCRIBE on account [TOTO3]
06:51:09.311 INFO   SUBSCRIBE on account [TOTO4]
06:51:09.502 INFO   SUBSCRIBE on account [TOTO5]
06:51:09.739 INFO   SUBSCRIBE on account [TOTO6]" | sed 's@\(..:..:......\).*\[\(.*\)\].*@\1\|\2@g' | awk -F "|" 'BEGIN {
    previous_datetime=0
    new_datetime=0
    previous_account=""
} {
    current_datetime = $1

    cmd = "date +\"%s\" -d \""current_datetime"\""
    cmd | getline current_seconds
    close(cmd)

    cmd = "date +\"%N\" -d \""current_datetime"\""
    cmd | getline current_nano
    close(cmd)
    
    new_datetime = current_seconds * 1000 + current_nano / 1000000
        
    if (previous_datetime != 0)
    {       
        printf("%s %s\n", previous_account, new_datetime - previous_datetime); 
    }
    previous_account=$2
    previous_datetime = new_datetime;
} END {
    if (previous_datetime != 0)
    {
        printf("%s %s\n", previous_account, new_datetime - previous_datetime); 
    }
}
' | sort -k 2 -rn
TOTO1 5423
TOTO2 570
TOTO5 237
TOTO3 194
TOTO4 191
TOTO6 0

#------------------------------------------------------------------------------
# Time elapsed in milliseconds between two lines (format %H:%M:%S.xxx) (diff) (v2)
#!/bin/bash

echo "14:28:38.252609|START
14:28:38.531826|END
14:36:23.847652|START
14:36:24.033606|END" | awk -F "|" 'BEGIN { dt_start=0 }
function convert_string_to_millis(str) {
    current_datetime=str

    cmd = "date +\"%s\" -d \""current_datetime"\""
    cmd | getline current_seconds
    close(cmd)

    cmd = "date +\"%N\" -d \""current_datetime"\""
    cmd | getline current_nano
    close(cmd)

    return ( current_seconds * 1000 + current_nano / 1000000 )
}
/START/ { dt_start=convert_string_to_millis($1); str_start=$1 }
/END/   { printf("%s | %s ms\n", str_start, convert_string_to_millis($1) - dt_start) }
'
$ ./elapsed.sh 
14:28:38.252609 | 279.217 ms
14:36:23.847652 | 185.954 ms


#------------------------------------------------------------------------------
# Time elapsed in seconds between two lines (format %H:%M:%S) (diff) (v3)
#!/bin/bash

echo "

20190701 16:00:00 : End 8
20190701 16:22:55 : Start
20190701 16:34:23 : End 8
20190701 16:35:01 : Start
20190701 16:45:33 : End 8

" | awk -F " " 'BEGIN {
    dt_start=0; str_start="00:00:00";
    print "Diff,    Start,   End"
}

function convert_string_to_millis(str) {
    current_datetime=str

    cmd = "date +\"%s\" -d \""current_datetime"\""
    cmd | getline current_seconds
    close(cmd)

    return current_seconds
}

/Start/ { str_start=$2 ; dt_start=convert_string_to_millis(str_start); }
/End/   { str_end=$2   ; dt_end=convert_string_to_millis(str_end); 

    cmd = "date -u -d \"0 "dt_end" sec - "dt_start" sec\" +\"%H:%M:%S\""
    cmd | getline diff_time
    close(cmd)
    
    print diff_time, str_start, str_end
}
'
$ ./elapsed.sh
Diff,    Start,   End
14:00:00 00:00:00 16:00:00
00:11:28 16:22:55 16:34:23
00:10:32 16:35:01 16:45:33


#------------------------------------------------------------------------------
# AWK : Print until pattern (included)
$ seq 1 10 | awk 'BEGIN { p = 1 } { if ( p == 1 ) print $0 } /7/ { p = 0; }' | wc -l
7

# AWK : Print until pattern (not included)
$ seq 1 10 | awk 'BEGIN { p = 1 } /7/ { p = 0; } { if ( p == 1 ) print $0 }' | wc -l
6


#------------------------------------------------------------------------------
# Search for files where the pattern appears only once
rgrep "pattern" * | cut -d':' -f1 | sort | uniq -c | egrep '^\s*1 ' | sed 's/^\s*1 //g'


#=============================================================================#
# GREP : colors                                                               #
#=============================================================================#


# Show pattern in red (default color)
grep <pattern> file

# Show pattern in green
GREP_COLOR="1;32" grep <pattern> file

# Show pattern in red (default color) with less
grep --color=always <pattern> file | less -R

# Show pattern in green with less
GREP_COLOR="1;32" grep --color=always <pattern> file | less -R


#=============================================================================#
# AWK : Merge lines and filter lines                                          #
#=============================================================================#


Example with :

$ cat /tmp/file
{
    A
    B
    C
}
{
    D
    E
    F
}
{
    G
    H
    I
}

$ cat /tmp/file | awk ' BEGIN { OFS=""; RS=ORS="}\n"} {$1=$1}1'
{ABC}
{DEF}
{GHI}

$ cat /tmp/file | awk ' BEGIN { OFS=" "; RS=ORS="}\n"} {$1=$1}1'
{ A B C}
{ D E F}
{ G H I}

$ cat /tmp/file | awk ' BEGIN { OFS=" "; RS="}\n" ; ORS=" }\n"} {$1=$1}1'
{ A B C }
{ D E F }
{ G H I }

$ cat /tmp/file | awk ' BEGIN { FS="\n" ; OFS=""; RS=ORS="}\n"} {$1=$1}1'
{    A    B    C}
{    D    E    F}
{    G    H    I}

$ cat /tmp/file | awk ' BEGIN { FS="\n" ; OFS="@@@"; RS=ORS="}\n"} {$1=$1}1'
{@@@    A@@@    B@@@    C@@@}
{@@@    D@@@    E@@@    F@@@}
{@@@    G@@@    H@@@    I@@@}

# Filter : D
$ cat /tmp/file | awk ' BEGIN { FS="\n" ; OFS="@@@"; RS=ORS="}\n"} {$1=$1}1' | grep -v 'D' | sed 's/@@@/\n/g'
{
    A
    B
    C
}
{
    G
    H
    I
}

# Filter : G and H
$ export DELIM='@@@' ; cat /tmp/file | awk -v DELIM=$DELIM ' BEGIN { FS="\n" ; OFS=DELIM; RS=ORS="}\n"} {$1=$1}1' | grep -v "G${DELIM}\s*H" | sed 's/@@@/\n/g'
{
    A
    B
    C
}
{
    D
    E
    F
}

# Merge blocks in one line separated by '|'
echo "az
er
ty

hel
lo

wor
ld
" | awk '{ SEP=""; for (i = 1; i <= NF; i++) { printf SEP $i; SEP="|" }; print "" }' RS="\n\n" FS="\n"
az|er|ty
hel|lo
wor|ld


#=============================================================================#
# Replace code source / functions                                             #
#=============================================================================#


# CHECK : find, xargs grep, sed
$ find . -type f -name "*.[ch]*" \
| xargs grep -e "datetime_copy(.*, application_now" \
| sed 's/datetime_copy(\(.*\), application_now())/application_now_r(\1)/g' 

# APPLY : find, xargs grep -l, xargs sed -i
$ find . -type f -name "*.[ch]*" \
| xargs grep -le "datetime_copy(.*, application_now" \
| xargs sed -i 's/datetime_copy(\(.*\), application_now())/application_now_r(\1)/g'


#=============================================================================#
# Unbuffered version                                                          #
#=============================================================================#


tail -f file | grep --line-buffered pattern | sed --unbuffered 's///g' | awk '{ print $0; system("")}'


#=============================================================================#
# lookbehind (recherche en arrière)                                           #
#=============================================================================#

Regex "classique", get characters between "server_name" and ";"
sed 's/^server_name \(.*\);/\1/g' /etc/file.conf

Versus Regex "Perl"
grep -P -o "(?<=^server_name )[^;]*" /etc/file.conf

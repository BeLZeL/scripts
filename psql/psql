===============================================================================

-- Execute query every SEC seconds
#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset

cat <<EOQ | PGOPTIONS='--client-min-messages=warning' /usr/bin/psql -Xq -v ON_ERROR_STOP=1 --pset pager=off -U <user> -h <host> <db>
select * from table
\watch 30
;
EOQ


===============================================================================

-- usefull client commands : https://www.postgresql.org/docs/9.2/static/app-psql.html

===============================================================================

-- usefull to parse response
psql -h <host> -U <user> <db> -P footer=off -qAc "select * from <table>;"

===============================================================================

-- Show result on one line
select concat('(''', string_agg(id, ''','''), ''')' ) from table where condition;
                      concat                       
---------------------------------------------------
 ('123456','456789')
(1 row)

===============================================================================

-- Taille BDD

SELECT
    relname as "Table",
    pg_size_pretty(pg_total_relation_size(relid)) As "Size",
    pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) as "External Size"
    FROM pg_catalog.pg_statio_user_tables ORDER BY pg_total_relation_size(relid) DESC;

===============================================================================

-- Variables
-- http://stackoverflow.com/questions/36959/how-do-you-use-script-variables-in-postgresql

\set myvariable value
SELECT * FROM :myvariable.table1;
SELECT * FROM table1 WHERE :myvariable IS NULL;

\set myvariable 'value'
\set quoted_myvariable '\'' :myvariable '\''
INSERT INTO :myvariable.table1 SELECT * FROM table2 WHERE column1 = :quoted_myvariable;

===============================================================================

-- Taille des index et des tables avec le ratio
-- Utile pour voir si les index sont fragmentés et ont besoin d'un REINDEX.

SELECT nspname,relname,
  round(100 * pg_relation_size(indexrelid) / pg_relation_size(indrelid)) / 100 AS index_ratio,
  pg_size_pretty(pg_relation_size(indexrelid)) AS index_size,
  pg_size_pretty(pg_relation_size(indrelid)) AS table_size
FROM pg_index I
LEFT JOIN pg_class C ON (C.oid = I.indexrelid)
LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
WHERE
  nspname NOT IN ('pg_catalog','information_schema','pg_toast') AND c.relkind='i' AND pg_relation_size(indrelid) > 0;

===============================================================================

-- Export/Import to a file

\COPY ( select col1, col2 from table ) TO '/tmp/file' (DELIMITER '|');
\COPY table (col1, col2)             FROM '/tmp/file' (DELIMITER '|');


===============================================================================

-- Affichage sympa

\pset border [012]
\pset linestyle [unicode|ascii]

# select type, order_time, origin from orders;
+------+---------------------+--------+
| type |     order_time      | origin |
+------+---------------------+--------+
| ABC  | 2032-06-29 12:18:51 | LINE   |
+------+---------------------+--------+

===============================================================================

Les joins

-- https://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u inner join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2;
 u | u2
---+----
 4 |  4
(1 row)
</source>

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u left outer join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2;
 u | u2
---+----
 1 |
 2 |
 3 |
 4 |  4
(4 rows)
</source>

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u right outer join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2;
 u | u2
---+----
 4 |  4
   |  5
   |  6
   |  7
(4 rows)
</source>

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u full outer join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2;
 u | u2
---+----
 1 |
 2 |
 3 |
 4 |  4
   |  5
   |  6
   |  7
(7 rows)
</source>

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u right outer join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2 where u is null;
 u | u2
---+----
   |  5
   |  6
   |  7
(3 rows)
</source>

===============================================================================
-- Find elements in table 1 not found in table 2

WITH
tmp_table_1 AS ( SELECT id from table_1 where order_time>='2017-07-20' and cum_qty != 0 ),
tmp_table_2 AS ( SELECT id from table_2 where order_time>='2017-07-20' )
SELECT id from tmp_table_1 where id not in ( select id from tmp_table_2 );

SELECT * FROM table_1 t1
LEFT OUTER JOIN table_2 t2
ON t1.id = t2.id
WHERE t2.id IS NULL AND t1.cum_qty != 0 LIMIT 5;

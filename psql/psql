===============================================================================

-- Rights
 r -- SELECT ("read")
 w -- UPDATE ("write")
 a -- INSERT ("append")
 d -- DELETE
 R -- RULE
 x -- REFERENCES
 t -- TRIGGER
 X -- EXECUTE
 U -- USAGE
 C -- CREATE
 T -- TEMPORARY
                  
===============================================================================

-- Bulk Multi Commands and parse results

psql -U postgres -h <host> <db> << EOF
DELETE FROM <table> where user_id ='A' ;
DELETE FROM <table> where user_id ='B' ;
EOF

echo "DELETE FROM <table> where user_id ='A' ; DELETE FROM <table> where user_id ='B' ; " | psql -U postgres -h 127.0.0.1 db -tA

-- WARNING : -c will return only the last result !!
psql -U postgres -h 127.0.0.1 db -tAc "DELETE FROM <table> where user_id ='A' ; DELETE FROM <table> where user_id ='B' ; " 

===============================================================================

-- Execute query every SEC seconds
#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset

cat <<EOQ | PGOPTIONS='--client-min-messages=warning' /usr/bin/psql -Xq -v ON_ERROR_STOP=1 --pset pager=off -U <user> -h <host> <db>
select * from table
\watch 30
;
EOQ

===============================================================================

-- usefull client commands : https://www.postgresql.org/docs/9.2/static/app-psql.html

===============================================================================

-- usefull to parse response
psql -h <host> -U <user> <db> -P footer=off -qAc "select * from <table>;"

===============================================================================

-- Show result on one line
select concat('(''', string_agg(id, ''','''), ''')' ) from table where condition;
                      concat                       
---------------------------------------------------
 ('123456','456789')
(1 row)

===============================================================================

-- Taille BDD
-- Table : The name of the table
-- Size : The total size that this table takes
-- External Size : The size that related objects of this table like indices take

SELECT
    relname as "Table",
    pg_size_pretty(pg_total_relation_size(relid)) As "Size",
    pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) as "External Size"
    FROM pg_catalog.pg_statio_user_tables ORDER BY pg_total_relation_size(relid) DESC;

===============================================================================

-- Variables
-- http://stackoverflow.com/questions/36959/how-do-you-use-script-variables-in-postgresql

\set myvariable value
SELECT * FROM :myvariable.table1;
SELECT * FROM table1 WHERE :myvariable IS NULL;

\set myvariable 'value'
\set quoted_myvariable '\'' :myvariable '\''
INSERT INTO :myvariable.table1 SELECT * FROM table2 WHERE column1 = :quoted_myvariable;

\set var '\'A\',\'B\''
SELECT * FROM table1 WHERE column1 in ( :var );

\set var '(\'A\',\'B\')'
SELECT * FROM table1 WHERE column1 in :var;

\set var 'column1 in (\'A\',\'B\')'
SELECT * FROM table1 WHERE :var;

===============================================================================

-- Taille des index et des tables avec le ratio
-- Utile pour voir si les index sont fragmentÃ©s et ont besoin d'un REINDEX.

SELECT nspname,relname,
  round(100 * pg_relation_size(indexrelid) / pg_relation_size(indrelid)) / 100 AS index_ratio,
  pg_size_pretty(pg_relation_size(indexrelid)) AS index_size,
  pg_size_pretty(pg_relation_size(indrelid)) AS table_size
FROM pg_index I
LEFT JOIN pg_class C ON (C.oid = I.indexrelid)
LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
WHERE
  nspname NOT IN ('pg_catalog','information_schema','pg_toast') AND c.relkind='i' AND pg_relation_size(indrelid) > 0;

===============================================================================

-- seq_tup_read   bigint  Number of live rows fetched by sequential scans
-- idx_scan       bigint  Number of index scans initiated on this table -> 0 if index is unused
-- idx_tup_fetch  bigint  Number of live rows fetched by index scans

SELECT
    t.tablename,
    indexname,
    c.reltuples AS num_rows,
    pg_size_pretty(pg_relation_size(quote_ident(t.tablename)::text)) AS table_size,
    pg_size_pretty(pg_relation_size(quote_ident(indexrelname)::text)) AS index_size,
    CASE WHEN indisunique THEN 'Y'
       ELSE 'N'
    END AS UNIQUE,
    idx_scan AS number_of_scans,
    idx_tup_read AS tuples_read,
    idx_tup_fetch AS tuples_fetched
FROM pg_tables t
LEFT OUTER JOIN pg_class c ON t.tablename=c.relname
LEFT OUTER JOIN
    ( SELECT c.relname AS ctablename, ipg.relname AS indexname, x.indnatts AS number_of_columns, idx_scan, idx_tup_read, idx_tup_fetch, indexrelname, indisunique FROM pg_index x
           JOIN pg_class c ON c.oid = x.indrelid
           JOIN pg_class ipg ON ipg.oid = x.indexrelid
           JOIN pg_stat_all_indexes psai ON x.indexrelid = psai.indexrelid )
    AS foo
    ON t.tablename = foo.ctablename
WHERE t.schemaname='public'
ORDER BY 1,2;

===============================================================================

-- Approx. Number of rows / records in all tables
-- https://stackoverflow.com/questions/2596670/how-do-you-find-the-row-count-for-all-your-tables-in-postgres

WITH
first_req AS  (
SELECT schemaname,relname,n_live_tup 
  FROM pg_stat_user_tables 
  ORDER BY n_live_tup DESC
),
second_req AS (
    SELECT 
      nspname AS schemaname,relname,reltuples::bigint
    FROM pg_class C
    LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
    WHERE 
      nspname NOT IN ('pg_catalog', 'information_schema') AND
      relkind='r' 
    ORDER BY reltuples DESC
)
SELECT first_req.relname, n_live_tup, reltuples, (n_live_tup - reltuples) as diff FROM first_req, second_req WHERE first_req.relname = second_req.relname ORDER BY reltuples DESC;

===============================================================================

-- Search tables with this column name (method 1)

select c.relname, a.attname
from pg_class as c
    inner join pg_attribute as a on a.attrelid = c.oid
where a.attname ~ '<column>' and c.relkind = 'r' order by relname;

-- Search tables and data_type with a column name (method 2)

select table_name, column_name, data_type from INFORMATION_SCHEMA.COLUMNS where column_name ~ '<column>' and table_schema = 'public' order by 1, 2, 3;

===============================================================================

-- Export/Import to a file

\COPY ( select col1, col2 from table ) TO '/tmp/file' (DELIMITER '|');
\COPY table (col1, col2)             FROM '/tmp/file' (DELIMITER '|');

===============================================================================

-- Affichage sympa

\pset border [012]
\pset linestyle [unicode|ascii]

# select type, order_time, origin from orders;
+------+---------------------+--------+
| type |     order_time      | origin |
+------+---------------------+--------+
| ABC  | 2032-06-29 12:18:51 | LINE   |
+------+---------------------+--------+

===============================================================================

Les joins

-- https://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u inner join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2;
 u | u2
---+----
 4 |  4
(1 row)
</source>

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u left outer join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2;
 u | u2
---+----
 1 |
 2 |
 3 |
 4 |  4
(4 rows)
</source>

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u right outer join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2;
 u | u2
---+----
 4 |  4
   |  5
   |  6
   |  7
(4 rows)
</source>

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u full outer join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2;
 u | u2
---+----
 1 |
 2 |
 3 |
 4 |  4
   |  5
   |  6
   |  7
(7 rows)
</source>

<source lang=sql>
# select * from unnest(ARRAY[1, 2, 3, 4]) u right outer join unnest(ARRAY[4, 5, 6, 7]) u2 on u=u2 where u is null;
 u | u2
---+----
   |  5
   |  6
   |  7
(3 rows)
</source>

===============================================================================
-- Find elements in table 1 not found in table 2

WITH
tmp_table_1 AS ( SELECT id from table_1 where order_time>='2017-07-20' and cum_qty != 0 ),
tmp_table_2 AS ( SELECT id from table_2 where order_time>='2017-07-20' )
SELECT id from tmp_table_1 where id not in ( select id from tmp_table_2 );

SELECT * FROM table_1 t1
LEFT OUTER JOIN table_2 t2
ON t1.id = t2.id
WHERE t2.id IS NULL AND t1.cum_qty != 0 LIMIT 5;

===============================================================================

-- Return number of lines in column 'body'
select length(regexp_replace(body, E'[^\\n]', '', 'g')) from table;

===============================================================================

-- Delete duplicate entries (ctid is an hidden psql column)
DELETE FROM table WHERE ctid IN (
SELECT MAX(ctid) as ctid
FROM     table
GROUP BY column1, column2, column3, ...
HAVING   COUNT(*) > 1);

===============================================================================

-- Get median
SELECT max(id) FROM (
    SELECT id, ntile(2) over (order by id) as median FROM (
        SELECT unnest('{3,5,2,10,4,8,7,12,50,100,19,28,44,22,1}'::bigint[]) as id
    ) as foo
) as bar
WHERE median = 1;

 max
-----
  10

===============================================================================

-- update empty values from another filled tables

UPDATE table_dest
SET val1 = table_src.val1, val2 = table_src.val2
FROM table_src
WHERE   table_src.order_id = table_dest.id
    AND table_dest.val1 = 0
    AND table_dest.val2 = 0
    AND table_dest.val3 = 'EXECUTED';

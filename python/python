#---------------------------------------------------------
# shebang (but ps -e will return 'python3')
#!/usr/bin/env python3

# shebang (ps -e will return '<script_name.py>')
#!/usr/bin/python3

#---------------------------------------------------------
# Documentation
# pip :
http://apprendre-python.com/page-pip-installer-librairies-automatiquement

# virtualenv :
http://apprendre-python.com/page-virtualenv-python-environnement-virtuel


#=============================================================================#
# STRING                                                                      #
#=============================================================================#


#---------------------------------------------------------
# String Format Examples
# https://www.python-course.eu/python3_formatted_output.php
# https://pyformat.info/

"First argument: {0}, second one: {1}".format(47,11) 
'First argument: 47, second one: 11'

"Art: {a:5d},  Price: {p:8.2f}".format(a=453, p=59.058)
'Art:   453,  Price:    59.06'

"{0:>20s} {1:6.2f}".format('Spam & Eggs:', 6.99)
'        Spam & Eggs:   6.99'

#---------------------------------------------------------
# Most elegant way to check if the string is empty
if not myString:

#---------------------------------------------------------
# Get substring with regex
import re
filename='toto.txt'
try:
    sub_filename = re.search('(.+?).txt', filename).group(1)
except AttributeError:
    sub_filename = filename
-> sub_filename='toto'

#---------------------------------------------------------
# Search any substring of a list into another string
mylist = ["dog", "cat", "wildcat", "thundercat", "cow", "hooo"]
if any(x in "hello / wildcat / world" for x in mylist):
    print("found")
if not any(x in "hello / wildat / world" for x in mylist):
    print("not found")


#=============================================================================#
# STRING                                                                      #
#=============================================================================#


#---------------------------------------------------------
# F-strings
# https://peps.python.org/pep-0498/
# https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings
# https://connect.ed-diamond.com/GNU-Linux-Magazine/glmfhs-111/le-point-sur-le-debogage-en-python
>>> name = "Eric"
>>> age = 74

>>> f"Hello, {name}. You are {age}."
'Hello, Eric. You are 74.'

>>> f"Hello, {name!r}. You are {age}."
"Hello, 'Eric'. You are 74."

# Python 3.8+
>>> f"Hello, {name=}. {age=}."
"Hello, name='Eric'. age=74."

>>> from Point import Point
>>> p = Point(2, 3)
>>> print(f'{p=}')
p=Point(x=2, y=3)

#---------------------------------------------------------
# Print 'n' chars
print('-' * 3)

#---------------------------------------------------------
# Method to print a class
def __str__(self):
    return "My name is {}".format(self.name)
    # try also ?
    return "My name is {name}".format(**self)

#---------------------------------------------------------    
# Text wrap properly
# $ cat input | py > output
# Nearly same as 
# $ fold -s -w 250 input > output
#!/usr/bin/env python3
import sys
import textwrap
for line in sys.stdin:   
    print("\n".join(textwrap.wrap(line.rstrip(), width=250)))
    
#=============================================================================#
# PROCESS                                                                     #
#=============================================================================#


#---------------------------------------------------------
# Run a command with pipe getting stdout
import subprocess
p = subprocess.check_output("date | cut -d' ' -f2", shell=True)
print(p.decode('UTF-8').rstrip())


#=============================================================================#
# READ/WRITE/FILES                                                            #
#=============================================================================#


#---------------------------------------------------------
# read stdin (rstrip = chomp = trimmed = remove last 'blank' char)
import sys
for line in sys.stdin:   
    print(line.rstrip())

#---------------------------------------------------------
# Read a file to string
token=open("/home/user/token", "r").read()

#---------------------------------------------------------
# Write a file from string
token=open("/home/user/token", "w").write("string")

#---------------------------------------------------------
# Read a file line by line with grep style
import re
import os
fichier=open("/tmp/list", "r")
for line in fichier.readlines():
    line = line.rstrip()
    try:
        first_word = re.search('([^ ]*) .*', line).group(1)
    except AttributeError:
        continue
    print(line + "\t======> " + first_word )
fichier.close()

#---------------------------------------------------------
# Create directory if not exists
import os
if not os.path.exists(directory):
    os.mkdir(directory)

#---------------------------------------------------------
# List files in current directory
from __future__ import print_function
import os 
path = '.' 
files = os.listdir(path)
for name in files:
    print(name)

#---------------------------------------------------------
# Parse fields of file (format "123|456")
import re
import os
fichier=open("/tmp/fichier.txt", "r")
for line in fichier.readlines():
    line = line.rstrip()
    try:
        m = re.match(r"([0-9]*)\|([0-9]*)", line)
        field1 = m.group(1)
        field2 = m.group(2)
    except AttributeError:
        continue
fichier.close()


#=============================================================================#
# OTHERS                                                                      #
#=============================================================================#


#---------------------------------------------------------
# Sleep
import time
time.sleep(1)

#---------------------------------------------------------
# Manage dry-run quick and dirty
#!/usr/bin/env python3
import sys
DRY_RUN = 1 if ( len(sys.argv) == 2 and sys.argv[1] == '--dry-run' ) else 0
print(DRY_RUN)

#---------------------------------------------------------
# Parse Args
import sys
print('Number of arguments:', len(sys.argv), 'arguments.')
print('Argument List:', str(sys.argv))
print('Process:', str(sys.argv[0]))

#---------------------------------------------------------
# Python: about catching ANY exception
# https://stackoverflow.com/questions/4990718/python-about-catching-any-exception
import traceback
import logging
try:
    whatever()
except Exception as e:
    logging.error(traceback.format_exc())
    # Logs the error appropriately. 

#---------------------------------------------------------
# Diff time
from datetime import datetime
start = datetime.now()
print(datetime.now() - start)
-> 0:00:00.894091

#---------------------------------------------------------
# Diff time (with millis) of two strings
from datetime import datetime

request='07:08:00.317'
response='07:08:03.352'
d1 = datetime.strptime(request,  '%H:%M:%S.%f')
d2 = datetime.strptime(response, '%H:%M:%S.%f')
print(d2 - d1)
-> 0:00:03.035000

#---------------------------------------------------------
# Print date
from datetime import datetime
>>> print(datetime.today().date())
2019-06-12
>>> print(datetime.today().strftime('%Y%m%d'))
20190612

#---------------------------------------------------------
# Convert specific format of datetime to a datetime object
$ echo "20191108-155841" | python3 -c "from datetime import datetime; dt = input(); print(datetime.strptime(dt, '%Y%m%d-%H%M%S'))"
$ echo "20191108-155841" | python3 -c "from datetime import datetime; print(datetime.strptime(input(), '%Y%m%d-%H%M%S'))"
2019-11-08 15:58:41
$ echo "20191108-155841" | python3 -c "from datetime import datetime; print(datetime.strftime(datetime.strptime(input(), '%Y%m%d-%H%M%S'), '%H:%M:%S'))"
15:58:41
$ echo "20191108-155841" | python3 -c "from datetime import datetime, timedelta; print(datetime.strftime(datetime.strptime(input(), '%Y%m%d-%H%M%S') + timedelta(hours=2), '%H:%M:%S'))"
17:58:41

#---------------------------------------------------------
# Functional programming
 >>> [ x * x for x in range(10) if x % 2 ]
 [1, 9, 25, 49, 81]

#---------------------------------------------------------
# Parse JSON
# https://docs.python.org/fr/3/library/json.html
>>> import json
>>> json.loads('{"buildDate": "2018-06-05T09:35:40Z","currentVersion": "1.0.0","metadata": {"timestamp": "2018-06-19T09:04:24Z","version": "1.0.0"}}')['buildDate']
u'2018-06-05T09:35:40Z'

#---------------------------------------------------------
# Returns the current filename and the current line number in our program
def func_line():
    return inspect.currentframe().f_back.f_code.co_name + "@" + str(inspect.currentframe().f_back.f_lineno)

#---------------------------------------------------------
# Compare two dictionnaries
shared_items = {k: x[k] for k in x if k in y and x[k] == y[k]}
print(len(shared_items))

#---------------------------------------------------------
# Print list of string of dict without quotes
>>> myDict = {}
>>> myDict['test1']=["hello","world"]
>>> myDict['test2']=["hello","world"]
>>> print(myDict)
{'test1': ['hello', 'world'], 'test2': ['hello', 'world']}
>>> print('{%s}' % (', '.join('%s : [%s]' % (k,', '.join(map(str, myDict[k]))) for k in myDict.keys())))
{test1 : [hello, world], test2 : [hello, world]}

#---------------------------------------------------------
# Random
import random
random.random()
random.randrange(2)
random.sample([1,2,3],2)


Principe de la Programmation Orientée Objet (POO)

* Encapsulation : https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-242/principes-de-l-oriente-objet-en-c-l-encapsulation

* Héritage et polymorphisme : https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-243/principes-de-l-oriente-objet-en-c-heritage-et-polymorphisme

* Généricité : https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-248/principes-de-l-oriente-objet-en-c-la-genericite
-> fonctions génériques avec utilisation de template
-> classes génériques comme des listes d'éléments
-> bibliothèque de modèles standard : vector, map, find, algorithmes

#------------------------------------------------------------------------------

Humour et design patterns : https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-165/la-conception-de-logiciels-a-l-aide-de-design-patterns

C++0x : 07/2011 https://connect.ed-diamond.com/GNU-Linux-Magazine/glmfhs-055/c0x-et-gcc
C++   : 11/2013 https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-165/c-standard-library-stl-repartons-sur-de-bonnes-bases (string, vector, itérateurs, deque, list, namespace)
C++   : 02/2014 https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-168/c-standard-library-stl-repartons-sur-de-bonnes-bases-suite (map, multimap, unordered_map, unordered_multimap, count, count_if, find, find_if, copy, copy_if, etc., exceptions, istream, ostream, fstream)
C++11 : 10/2012 https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-153/c-11-et-gcc (foreach, enum, nullptr)
C++11/C++14 : 11/2019 https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-231/c-moderne-c11-c14

PAS LU
C++17 : 12/2019 https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-232/c-moderne-c17-partie-1
C++17 : 01/2020 https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-233/c-moderne-c17-partie-2
C++20 : 02/2020 https://connect.ed-diamond.com/GNU-Linux-Magazine/glmf-234/c-moderne-c20-et-au-dela

C++11 :
* Principe de Rvalue reference : https://connect.ed-diamond.com/GNU-Linux-Magazine/glmfhs-055/c0x-et-gcc#index_h3_25
* Lambda : https://connect.ed-diamond.com/GNU-Linux-Magazine/glmfhs-055/c0x-et-gcc#index_h3_26
* Smart Pointers : https://connect.ed-diamond.com/GNU-Linux-Magazine/glmfhs-055/c0x-et-gcc#index_h3_35


#=============================================================================#
# METHOD                                                                      #
#=============================================================================#

#------------------------------------------------------------------------------
# Const method : "this" pointer will essentially become a pointer to "const" object, and you cannot therefore change any member data.
# Mandatory for "getters"
# https://stackoverflow.com/questions/751681/meaning-of-const-last-in-a-function-declaration-of-a-class

bool classname::method() const { ... }

#------------------------------------------------------------------------------
# Override method :

int moyenne(int i1, int i2); 
float moyenne(float f1, float f2); //surcharge valide 

https://connect.ed-diamond.com/GNU-Linux-Magazine/GLMF-232/C-Moderne-C17-partie-1
* Structured Binding Declarations
* [[fallthrough]], [[maybe_unused]], [[nodiscard]]
* string_view
* boyer_moore_searcher
* optional, variant, any

#------------------------------------------------------------------------------
# GCC/Clang Options

# Assembleur
gcc -O2 -S code1.cpp -o gcc_temp.ass
clang -O2 -S code1.cpp -o clang_temp.ass

#------------------------------------------------------------------------------
# C++20 Likely :  pour marquer le test d’une branche qui a de fortes chances de s’évaluer à vrai
# https://connect.ed-diamond.com/gnu-linux-magazine/glmf-263/les-codes-fantastiques-une-prediction-exceptionnelle

int foo(bool val) {
  if(val) [[likely]]
    return bar();
  return 1;
}

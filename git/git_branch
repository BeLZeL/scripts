
Characters autorized for Branch name : A-Za-z0-9/_-


#==========================
# Used 20241127
J'ai 4 commit dans une branche.
Je souhaiterai la mettre à jour en réintégrant tous les commit master.
#--------------------------
Le `rebase` réapplique vos commits sur la branche `master` mise à jour, ce qui permet d'obtenir un historique de commits plus linéaire.

```bash
# Assurez-vous que vous êtes sur la branche que vous souhaitez mettre à jour
git checkout votre-branche

# Mettez à jour la branche master locale avec les derniers commits du dépôt distant
git fetch origin
git checkout master
git pull origin master

# Revenez à votre branche et lancez le rebase
git checkout votre-branche
git rebase master
```

Si des conflits se produisent, vous devrez les résoudre manuellement, puis continuer le rebase :

```bash
# Après avoir résolu les conflits
git add fichiers_résolus
git rebase --continue
```
#==========================




#==========================#
# Create Shared Dev Branch #
#==========================#


BRANCH=user/ticketnumber

git checkout -b ${BRANCH}
git add -A
git commit -m "First commit"
git push -u origin ${BRANCH}


#====================#
# Merge Pull Request #
#====================#


git ls-remote --heads

BRANCH=user/ticketnumber

git checkout -b ${BRANCH} origin/${BRANCH}

# Diff
git diff --stat master...${BRANCH}
git diff master...${BRANCH}
git difftool --dir-diff --color=always --tool=meld master...${BRANCH}
Optional :
    # modifications
    git add -A
    git commit -m ""
    git push
git checkout master

POUR UN SEUL COMMIT
git merge --squash ${BRANCH}

OU BIEN POUR DISTINGUER LES COMMITS
git rebase master ${BRANCH}
git checkout master
git merge ${BRANCH}

Optional :
    # modifications
    git add -A
    git difftool --dir-diff --cached --color=always --tool=meld
    git commit # already contains commit messages

git push
git push origin --delete ${BRANCH}
git branch -D ${BRANCH}
git fetch --prune


#==================#
# Local Operations #
#==================#


#--------------------------------------------------------
# Create a new local branch
git checkout -b <branch>

#--------------------------------------------------------
# Access to existing local branch
git checkout <branch>

#--------------------------------------------------------
# Delete a local branch
git checkout master
git branch -d <branch> (or -D to force)

#--------------------------------------------------------
# Apply Modifications from a branch as Patch
git diff master...<branch> | git apply



#===================#
# Remote Operations #
#===================#


#-------------------------------------------------------- 
# List remote branch
git ls-remote --heads

#-------------------------------------------------------- 
# Checkout remote branch
git checkout -b <NAME> origin/<NAME>

#-------------------------------------------------------- 
# Check diff between master and branch
git diff master...<branch>

#--------------------------------------------------------
# Push a local branch to remote (commit something before)
git push -u origin <branch>

#--------------------------------------------------------
# Delete a remote branch
git push origin --delete <branch>
git branch --unset-upstream
# Then you need to delete local branch



#======================#
# Remote Branch Merged #
#======================#


#--------------------------------------------------------
# Get a remote merged branches
git branch -a --merged origin/master
git branch -r --merged origin/master

#--------------------------------------------------------
# Get a remote un-merged branches
git branch -va --no-merged origin/master

#--------------------------------------------------------
# Delete remote merged branches
git branch -r --merged origin/master | grep -v "origin/master" | sed 's@\s*origin/@@g' | xargs git push origin --delete
git branch -a --merged origin/master | egrep -v "(^\*|master)" | sed 's@\s*remotes/origin/@@g' | xargs git push origin --delete



#===================#
# Tricky Operations #
#===================#


#--------------------------------------------------------
# Get a remote branch (try)
git fetch
git checkout --track origin/<branch>
git checkout master
git merge --squash <branch>
( Then try git reset HEAD or git reset HEAD * )

#--------------------------------------------------------
# Rebase a branch (commit by commit)
git checkout <branch>
git fetch origin
git rebase origin/master
# If conflicts
# Edit file
git add <file>
git rebase --continue

#--------------------------------------------------------
# Rebase a branch (all commits)
git checkout master
git pull
git checkout <branch>
git merge master
git push
# If conflicts
# Edit file
git add <file>

#--------------------------------------------------------
# Merge a branch
git checkout master
git pull
git checkout <branch>
git rebase master
git checkout master
git merge <branch>
git push

#--------------------------------------------------------
# Hotfix
git checkout <hash>
git checkout -b <branch_name>
git log -1 -p <hash> # show diff
git revert <hash> # apply patch
[...commit...]
git push origin <branch_name> # push branch

#--------------------------------------------------------
# Hotfix (bis) with a pending stash
git stash save "TMP"
git checkout <hash>
git checkout -b <branch_name>
git stash pop
[...commit...]
git push origin <branch_name> # push branch

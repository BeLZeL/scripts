#--------------------------------------------------------
# Rebase a branch
git checkout <branch>
git rebase master
# If conflicts
# Edit file
git add <file>
git rebase --continue

#--------------------------------------------------------
# Merge a branch
git checkout master
git pull
git checkout <branch>
git rebase master
git checkout master
git merge <branch>
git push

#--------------------------------------------------------
# Delete a local branch
git branch -d <branch>

#--------------------------------------------------------
# Delete a remote branch
git push origin :<branch>
git push origin --delete <branch>

#--------------------------------------------------------
# Diff between commits
git diff --stat 152cb7b 53886f6

#--------------------------------------------------------
# Diff for a specific commit
git diff --stat --color dc14a600d17e7ddc579085f6f1a26a131cffd58d^ dc14a600d17e7ddc579085f6f1a26a131cffd58d | less -R 
git diff --color dc14a600d17e7ddc579085f6f1a26a131cffd58d^ dc14a600d17e7ddc579085f6f1a26a131cffd58d | less -R

#--------------------------------------------------------
# Debug with git : http://www.git-attitude.fr/2014/12/09/git-bisect/
$ git bisect start
$ git bisect bad <HEAD or commit>
$ git bisect good d7ffe6a
Bisecting: 34 revisions left to test after this (roughly 5 steps)
[fca1e1f16e4dc56bd6c47e8d25f51b18598ba1f8] <message>
$ git bisect good
Bisecting: 17 revisions left to test after this (roughly 4 steps)
[6524dc6c01bfda4848a7a4535bb3d611ee6cde0a] <message>
$ git bisect good
Bisecting: 8 revisions left to test after this (roughly 3 steps)
[658bd0ce33fe033d290a3dc0ef745eb9e214e921] <message>
$ git bisect good
Bisecting: 4 revisions left to test after this (roughly 2 steps)
[e83f14034dd63f7fd44799d3948013619a2af80a] <message>
$ git bisect skip
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[ffdd9e3971701107e9160c4fc383b7acb4ef4f58] <message>
$ git bisect good
Bisecting: 1 revision left to test after this (roughly 1 step)
[5cade4df713952e19e81eef778df07b153f45c11] <message>
$ git bisect good
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[ea4c2e70644466b240ad8bc715071d4f23ceded1] <message>
$ git bisect good
53886f6367ea501007f660facde31f6d79c8c1ed is the first bad commit
commit 53886f6367ea501007f660facde31f6d79c8c1ed
<message>

#--------------------------------------------------------
# Hotfix
git checkout <hash>
git checkout -b <branch_name>
git log -1 -p <hash> # show diff
git revert <hash> # apply patch
[...commit...]
git push origin <branch_name> # push branch

#--------------------------------------------------------
# Hotfix (bis) with a pending stash
git stash save "TMP"
git checkout <hash>
git checkout -b <branch_name>
git stash pop
[...commit...]
git push origin <branch_name> # push branch

#--------------------------------------------------------
# Re-work on a local commit
git reset HEAD~ --soft

#--------------------------------------------------------
# Force reset
git reset 99e0c04 --hard
git push origin master --force

#--------------------------------------------------------
# Reset local
git reset HEAD --hard

#--------------------------------------------------------
# Add a new file to the previous local commit, without launching an editor :
git commit --amend --no-edit

#-------------------------------------------------------- 
# Modify last commit (not pushed yet)
git commit --amend -m "New Message"

#--------------------------------------------------------
# Git diff with tool
$ git diff --color=always 1dd764e c242e1e --stat | head
 CMakeLists.txt        |  10 +
 libs/toto.cpp         | 156 +++++++++-
 libs/toto.hpp         |  23 +-

$ cat ~/.gitconfig
[...]
[diff]
    tool = meld
[difftool "meld"]
    cmd = "/home/user/progs/meld-1.3.1/meld \"$LOCAL\" \"$REMOTE\""

$ git difftool --color=always --tool=meld 1dd764e c242e1e

$ git difftool --color=always --tool=meld 1dd764e c242e1e -- products/toto.c

Viewing (1/1): 'products/toto.c'
Launch 'meld' [Y/n]: 

#-------------------------------------------------------- 
# Move a patch from a repo to another (TODO TEST)
$ git log --pretty=email --patch-with-stat --reverse --full-index --binary -- tonjolifichiersrc > /tmp/patch
$ cd lenouveaurepo
$ git am < /tmp/patch

#-------------------------------------------------------- 
# Move current changes from a repo to another
# https://stackoverflow.com/questions/5159185/create-a-git-patch-from-the-changes-in-the-current-working-directory
repos1 $ git diff > /tmp/patch
repos2 $ git apply /tmp/patch

#-------------------------------------------------------- 
# Checkout remote branch
git checkout -b <NAME> origin/<NAME>

#-------------------------------------------------------- 
# Check diff added but not committed
git diff --cached --stat

#-------------------------------------------------------- 
# Check diff between master and branch
git diff master...<branch>

#-------------------------------------------------------- 
# Cancel a git add
git reset
git reset <file>

#-------------------------------------------------------- 
# Use Tag (https://git-scm.com/book/en/v2/Git-Basics-Tagging)
git tag # List
git tag -a v1.4 -m 'my version 1.4' <hash> # Create
git show v1.4 # Show commit
git push --tag[s] # Push tag
git describe [--always] [--tags] # Show current tag

#-------------------------------------------------------- 
# Remote
git remote -v
git config --get remote.origin.url
git remote add origin <url>
git remote set-url origin <url>
